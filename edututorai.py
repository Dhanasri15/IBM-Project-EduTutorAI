# -*- coding: utf-8 -*-
"""EduTutorAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ScpLwsh1BUAxFU7U9-ZaEer0bqboGkXR
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ---------------- Load Model ----------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# ---------------- Response Generator ----------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response


# ---------------- Features ----------------
def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples:"
    return generate_response(prompt, max_length=800)


def quiz_generator(concept):
    prompt = (
        f"Generate 5 quiz questions about {concept} with different question types "
        f"(multiple choice, true/false, short answer). At the end, provide all the answers "
        f"in a separate section starting with 'ANSWERS:'."
    )
    result = generate_response(prompt, max_length=1000)

    # Split questions and answers
    if "ANSWERS:" in result:
        questions, answers = result.split("ANSWERS:", 1)
    else:
        questions, answers = result, "No answers found."

    return questions.strip(), answers.strip()


def flashcard_generator(concept):
    prompt = (
        f"Generate 5 flashcards for {concept}. Each flashcard should be in the format:\n"
        f"Q: <question>\nA: <answer>"
    )
    return generate_response(prompt, max_length=700)


# ---------------- Custom Theme ----------------
custom_theme = gr.themes.Base(
    primary_hue="red",
    secondary_hue="green",
).set(
    button_primary_background_fill="linear-gradient(to right, red, green)",
    button_primary_background_fill_hover="linear-gradient(to right, darkred, darkgreen)",
)


# ---------------- Gradio UI ----------------
with gr.Blocks(theme=custom_theme) as app:
    gr.Markdown("# ðŸŽ“ Educational AI Assistant")

    with gr.Tabs():
        # Concept Explanation
        with gr.TabItem("Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning")
            explain_btn = gr.Button("Explain")
            explanation_output = gr.Textbox(label="Explanation", lines=10)
            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        # Quiz Generator
        with gr.TabItem("Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_questions = gr.Textbox(label="Quiz Questions", lines=12)
            quiz_answers = gr.Textbox(label="Answers", lines=6)

            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=[quiz_questions, quiz_answers])

        # Flashcards
        with gr.TabItem("Flashcards"):
            flash_input = gr.Textbox(label="Enter a topic", placeholder="e.g., data structures")
            flash_btn = gr.Button("Generate Flashcards")
            flash_output = gr.Textbox(label="Flashcards (Q/A pairs)", lines=12)

            flash_btn.click(flashcard_generator, inputs=flash_input, outputs=flash_output)

app.launch(share=True)